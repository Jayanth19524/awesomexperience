{"ast":null,"code":"import _toConsumableArray from\"/Users/jayanth/Downloads/awesomexperience/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";// a reducer is a function that accepts the state and action\nexport default(function(){var posts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'LIKE':console.log('like');return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});case'DELETE':return posts.filter(function(post){return post._id!==action.payload;});case'UPDATE':console.log('update');return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});case'FETCH_ALL':console.log(\"fetch\");return action.payload;case'CREATE':console.log('post');return[].concat(_toConsumableArray(posts),[action.payload]);default:return posts;}});","map":{"version":3,"sources":["/Users/jayanth/Downloads/awesomexperience/client/src/reducers/posts.js"],"names":["posts","action","type","console","log","map","post","_id","payload","filter"],"mappings":"+KACA;AACA,eAAe,UAAqB,IAApBA,CAAAA,KAAoB,2DAAd,EAAc,IAAXC,CAAAA,MAAW,2CAChC,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,MAAL,CACIC,OAAO,CAACC,GAAR,CAAY,MAAZ,EACA,MAAOJ,CAAAA,KAAK,CAACK,GAAN,CAAU,SAACC,IAAD,QAAQA,CAAAA,IAAI,CAACC,GAAL,GAAWN,MAAM,CAACO,OAAP,CAAeD,GAA1B,CAA8BN,MAAM,CAACO,OAArC,CAA6CF,IAArD,EAAV,CAAP,CACJ,IAAK,QAAL,CACI,MAAON,CAAAA,KAAK,CAACS,MAAN,CAAa,SAACH,IAAD,QAAQA,CAAAA,IAAI,CAACC,GAAL,GAAWN,MAAM,CAACO,OAA1B,EAAb,CAAP,CACJ,IAAK,QAAL,CACIL,OAAO,CAACC,GAAR,CAAY,QAAZ,EACA,MAAOJ,CAAAA,KAAK,CAACK,GAAN,CAAU,SAACC,IAAD,QAAQA,CAAAA,IAAI,CAACC,GAAL,GAAWN,MAAM,CAACO,OAAP,CAAeD,GAA1B,CAA8BN,MAAM,CAACO,OAArC,CAA6CF,IAArD,EAAV,CAAP,CACJ,IAAK,WAAL,CACIH,OAAO,CAACC,GAAR,CAAY,OAAZ,EACA,MAAOH,CAAAA,MAAM,CAACO,OAAd,CACJ,IAAK,QAAL,CACIL,OAAO,CAACC,GAAR,CAAY,MAAZ,EACA,mCAAWJ,KAAX,GAAiBC,MAAM,CAACO,OAAxB,GAEJ,QACI,MAAOR,CAAAA,KAAP,CAjBR,CAqBH,CAtBD","sourcesContent":["\n// a reducer is a function that accepts the state and action\nexport default (posts=[],action) => {\n    switch (action.type){\n        case 'LIKE':\n            console.log('like');\n            return posts.map((post)=>post._id===action.payload._id?action.payload:post);\n        case 'DELETE':\n            return posts.filter((post)=>post._id!==action.payload);\n        case 'UPDATE':\n            console.log('update');\n            return posts.map((post)=>post._id===action.payload._id?action.payload:post);\n        case 'FETCH_ALL':\n            console.log(\"fetch\")\n            return action.payload;\n        case 'CREATE':\n            console.log('post');\n            return [...posts,action.payload];\n\n        default :\n            return posts;\n\n    }\n        \n}"]},"metadata":{},"sourceType":"module"}