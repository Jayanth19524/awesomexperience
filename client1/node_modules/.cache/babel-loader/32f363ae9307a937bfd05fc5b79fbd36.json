{"ast":null,"code":"var _jsxFileName = \"/Users/jayanth/Downloads/awesomexperience/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport FileBase from 'react-file-base64';\nimport useStyles from \"./styles\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost } from '../../actions/posts';\nimport { updatePost } from '../../actions/posts';\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  var _user$result3;\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [postData, setpostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  });\n  const post = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null);\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    if (post) setpostData(post);\n  }, [post]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (currentId) {\n      var _user$result;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n    } else {\n      var _user$result2;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n    }\n\n    clear();\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setpostData({\n      creator: \"\",\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\"\n    });\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/React.createElement(Paper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, currentId ? `edit` : `share`, \" your experience\"), /*#__PURE__*/React.createElement(TextField, {\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"title\",\n    value: postData.title,\n    onChange: e => setpostData({ ...postData,\n      title: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(TextField, {\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"message\",\n    value: postData.message,\n    onChange: e => setpostData({ ...postData,\n      message: e.target.value\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(TextField, {\n    name: \"tags\",\n    variant: \"outlined\",\n    label: \"tags\",\n    value: postData.tags,\n    onChange: e => setpostData({ ...postData,\n      tags: e.target.value.split(',')\n    }),\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FileBase, {\n    type: \"file\",\n    multiple: false,\n    onDone: ({\n      base64\n    }) => setpostData({ ...postData,\n      selectedFile: base64\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.buttonSubmit,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"small\",\n    onClick: clear,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"clear\")));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/jayanth/Downloads/awesomexperience/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useStyles","useDispatch","useSelector","createPost","updatePost","Form","currentId","setCurrentId","classes","dispatch","postData","setpostData","title","message","tags","selectedFile","post","state","posts","find","p","_id","user","JSON","parse","localStorage","getItem","handleSubmit","e","preventDefault","name","result","clear","creator","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["\nimport React ,{useState,useEffect}from 'react';\nimport {TextField,Button,Typography,Paper} from '@material-ui/core'\nimport FileBase from 'react-file-base64'\nimport useStyles from \"./styles\";\nimport { useDispatch,useSelector } from 'react-redux';\n\nimport { createPost } from '../../actions/posts';\nimport { updatePost } from '../../actions/posts'\nconst Form = ({currentId,setCurrentId}) => {\n        const classes = useStyles();\n        const dispatch =  useDispatch();\n        const [postData,setpostData] = useState(\n            { title:\"\", message:\"\", tags:\"\", selectedFile:\"\"}\n        );\n        const post = useSelector((state)=> currentId ? state.posts.find((p)=>p._id===currentId):null)\n        const user = JSON.parse(localStorage.getItem('profile'));\n        useEffect(()=>{\n            if(post) setpostData(post);\n        },[post])\n        const handleSubmit = (e) => {\n            e.preventDefault();\n            if(currentId){\n                dispatch(updatePost(currentId,{...postData,name: user?.result?.name}));                \n            }\n            else{\n                dispatch(createPost({...postData,name: user?.result?.name}));               \n            }\n            clear();\n        }\n        const clear = () => {\n            setCurrentId(null);\n            setpostData({creator:\"\", title:\"\", message:\"\", tags:\"\", selectedFile:\"\"});\n        }\n    if(!user?.result?.name){\n        return (\n            <Paper>\n                \n            </Paper>\n        )\n    }\n    return(\n        <Paper className={classes.paper}>\n            <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n                <Typography variant=\"h6\">{currentId ?`edit`:`share`} your experience</Typography>\n                {/* <TextField name=\"creator\" variant=\"outlined\" label=\"creator\" value={postData.creator} onChange={(e)=>setpostData({...postData,creator:e.target.value})} fullWidth> </TextField> */}\n                <TextField name=\"title\" variant=\"outlined\" label=\"title\" value={postData.title} onChange={(e)=>setpostData({...postData,title:e.target.value})} fullWidth> </TextField>\n                <TextField name=\"message\" variant=\"outlined\" label=\"message\" value={postData.message} onChange={(e)=>setpostData({...postData,message:e.target.value})} fullWidth> </TextField>\n                <TextField name=\"tags\" variant=\"outlined\" label=\"tags\" value={postData.tags} onChange={(e)=>setpostData({...postData,tags:e.target.value.split(',')})} fullWidth> </TextField>\n            <div className={classes.fileInput}>\n                <FileBase type=\"file\" multiple={false} onDone={({base64})=> setpostData({...postData,selectedFile:base64})}></FileBase>\n            </div>\n            <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>submit</Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>clear</Button>\n            </form>\n\n\n        </Paper>\n    )\n}\nexport default Form;"]},"metadata":{},"sourceType":"module"}